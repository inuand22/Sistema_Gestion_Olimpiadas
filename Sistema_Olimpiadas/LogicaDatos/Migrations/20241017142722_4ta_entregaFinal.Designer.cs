// <auto-generated />
using System;
using LogicaDatos.Repositorios;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaDatos.Migrations
{
    [DbContext(typeof(OlimpiadasContext))]
    [Migration("20241017142722_4ta_entregaFinal")]
    partial class _4ta_entregaFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AtletaDisciplina", b =>
                {
                    b.Property<int>("AtletasId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinasId")
                        .HasColumnType("int");

                    b.HasKey("AtletasId", "DisciplinasId");

                    b.HasIndex("DisciplinasId");

                    b.ToTable("AtletaDisciplina");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Atleta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsMasculino")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Atletas");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Delegados");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.EventoAtleta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtletaId")
                        .HasColumnType("int");

                    b.Property<int?>("EventoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PuntajeAtleta")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AtletaId");

                    b.HasIndex("EventoId");

                    b.ToTable("EventoAtleta");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHabitantes")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AtletaDisciplina", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Atleta", null)
                        .WithMany()
                        .HasForeignKey("AtletasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.EntidadesDominio.Disciplina", null)
                        .WithMany()
                        .HasForeignKey("DisciplinasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Atleta", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Disciplina", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.AnioDisciplina", "AnioDisciplina", b1 =>
                        {
                            b1.Property<int>("DisciplinaId")
                                .HasColumnType("int");

                            b1.Property<int>("Valor")
                                .HasColumnType("int");

                            b1.HasKey("DisciplinaId");

                            b1.ToTable("Disciplinas");

                            b1.WithOwner()
                                .HasForeignKey("DisciplinaId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObjects.NombreDisciplina", "Nombre", b1 =>
                        {
                            b1.Property<int>("DisciplinaId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DisciplinaId");

                            b1.ToTable("Disciplinas");

                            b1.WithOwner()
                                .HasForeignKey("DisciplinaId");
                        });

                    b.Navigation("AnioDisciplina")
                        .IsRequired();

                    b.Navigation("Nombre")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Evento", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LogicaNegocio.ValueObjects.NombreEvento", "NombreEvento", b1 =>
                        {
                            b1.Property<int>("EventoId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EventoId");

                            b1.ToTable("Eventos");

                            b1.WithOwner()
                                .HasForeignKey("EventoId");
                        });

                    b.Navigation("Disciplina");

                    b.Navigation("NombreEvento")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.EventoAtleta", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Atleta", "Atleta")
                        .WithMany("EventosAtletas")
                        .HasForeignKey("AtletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.EntidadesDominio.Evento", "Evento")
                        .WithMany("EventosAtletas")
                        .HasForeignKey("EventoId");

                    b.Navigation("Atleta");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Pais", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Delegado", "Delegado")
                        .WithMany()
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Usuario", b =>
                {
                    b.HasOne("LogicaNegocio.EntidadesDominio.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LogicaNegocio.ValueObjects.ContraseniaUsuario", "Contrasenia", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObjects.EmailUsuario", "Email", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Contrasenia")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Atleta", b =>
                {
                    b.Navigation("EventosAtletas");
                });

            modelBuilder.Entity("LogicaNegocio.EntidadesDominio.Evento", b =>
                {
                    b.Navigation("EventosAtletas");
                });
#pragma warning restore 612, 618
        }
    }
}
